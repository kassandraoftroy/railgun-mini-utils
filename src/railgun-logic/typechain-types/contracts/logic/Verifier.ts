/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type G1PointStruct = { x: BigNumberish; y: BigNumberish };

export type G1PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export type G2PointStruct = {
  x: [BigNumberish, BigNumberish];
  y: [BigNumberish, BigNumberish];
};

export type G2PointStructOutput = [x: [bigint, bigint], y: [bigint, bigint]] & {
  x: [bigint, bigint];
  y: [bigint, bigint];
};

export type VerifyingKeyStruct = {
  artifactsIPFSHash: string;
  alpha1: G1PointStruct;
  beta2: G2PointStruct;
  gamma2: G2PointStruct;
  delta2: G2PointStruct;
  ic: G1PointStruct[];
};

export type VerifyingKeyStructOutput = [
  artifactsIPFSHash: string,
  alpha1: G1PointStructOutput,
  beta2: G2PointStructOutput,
  gamma2: G2PointStructOutput,
  delta2: G2PointStructOutput,
  ic: G1PointStructOutput[]
] & {
  artifactsIPFSHash: string;
  alpha1: G1PointStructOutput;
  beta2: G2PointStructOutput;
  gamma2: G2PointStructOutput;
  delta2: G2PointStructOutput;
  ic: G1PointStructOutput[];
};

export type CommitmentCiphertextStruct = {
  ciphertext: [BytesLike, BytesLike, BytesLike, BytesLike];
  blindedSenderViewingKey: BytesLike;
  blindedReceiverViewingKey: BytesLike;
  annotationData: BytesLike;
  memo: BytesLike;
};

export type CommitmentCiphertextStructOutput = [
  ciphertext: [string, string, string, string],
  blindedSenderViewingKey: string,
  blindedReceiverViewingKey: string,
  annotationData: string,
  memo: string
] & {
  ciphertext: [string, string, string, string];
  blindedSenderViewingKey: string;
  blindedReceiverViewingKey: string;
  annotationData: string;
  memo: string;
};

export type BoundParamsStruct = {
  treeNumber: BigNumberish;
  minGasPrice: BigNumberish;
  unshield: BigNumberish;
  chainID: BigNumberish;
  adaptContract: AddressLike;
  adaptParams: BytesLike;
  commitmentCiphertext: CommitmentCiphertextStruct[];
};

export type BoundParamsStructOutput = [
  treeNumber: bigint,
  minGasPrice: bigint,
  unshield: bigint,
  chainID: bigint,
  adaptContract: string,
  adaptParams: string,
  commitmentCiphertext: CommitmentCiphertextStructOutput[]
] & {
  treeNumber: bigint;
  minGasPrice: bigint;
  unshield: bigint;
  chainID: bigint;
  adaptContract: string;
  adaptParams: string;
  commitmentCiphertext: CommitmentCiphertextStructOutput[];
};

export type SnarkProofStruct = {
  a: G1PointStruct;
  b: G2PointStruct;
  c: G1PointStruct;
};

export type SnarkProofStructOutput = [
  a: G1PointStructOutput,
  b: G2PointStructOutput,
  c: G1PointStructOutput
] & { a: G1PointStructOutput; b: G2PointStructOutput; c: G1PointStructOutput };

export type TokenDataStruct = {
  tokenType: BigNumberish;
  tokenAddress: AddressLike;
  tokenSubID: BigNumberish;
};

export type TokenDataStructOutput = [
  tokenType: bigint,
  tokenAddress: string,
  tokenSubID: bigint
] & { tokenType: bigint; tokenAddress: string; tokenSubID: bigint };

export type CommitmentPreimageStruct = {
  npk: BytesLike;
  token: TokenDataStruct;
  value: BigNumberish;
};

export type CommitmentPreimageStructOutput = [
  npk: string,
  token: TokenDataStructOutput,
  value: bigint
] & { npk: string; token: TokenDataStructOutput; value: bigint };

export type TransactionStruct = {
  proof: SnarkProofStruct;
  merkleRoot: BytesLike;
  nullifiers: BytesLike[];
  commitments: BytesLike[];
  boundParams: BoundParamsStruct;
  unshieldPreimage: CommitmentPreimageStruct;
};

export type TransactionStructOutput = [
  proof: SnarkProofStructOutput,
  merkleRoot: string,
  nullifiers: string[],
  commitments: string[],
  boundParams: BoundParamsStructOutput,
  unshieldPreimage: CommitmentPreimageStructOutput
] & {
  proof: SnarkProofStructOutput;
  merkleRoot: string;
  nullifiers: string[];
  commitments: string[];
  boundParams: BoundParamsStructOutput;
  unshieldPreimage: CommitmentPreimageStructOutput;
};

export interface VerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getVerificationKey"
      | "hashBoundParams"
      | "owner"
      | "renounceOwnership"
      | "setVerificationKey"
      | "transferOwnership"
      | "verify"
      | "verifyProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "VerifyingKeySet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getVerificationKey",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashBoundParams",
    values: [BoundParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationKey",
    values: [BigNumberish, BigNumberish, VerifyingKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [TransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [VerifyingKeyStruct, SnarkProofStruct, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getVerificationKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashBoundParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifyingKeySetEvent {
  export type InputTuple = [
    nullifiers: BigNumberish,
    commitments: BigNumberish,
    verifyingKey: VerifyingKeyStruct
  ];
  export type OutputTuple = [
    nullifiers: bigint,
    commitments: bigint,
    verifyingKey: VerifyingKeyStructOutput
  ];
  export interface OutputObject {
    nullifiers: bigint;
    commitments: bigint;
    verifyingKey: VerifyingKeyStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Verifier extends BaseContract {
  connect(runner?: ContractRunner | null): Verifier;
  waitForDeployment(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVerificationKey: TypedContractMethod<
    [_nullifiers: BigNumberish, _commitments: BigNumberish],
    [VerifyingKeyStructOutput],
    "view"
  >;

  hashBoundParams: TypedContractMethod<
    [_boundParams: BoundParamsStruct],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVerificationKey: TypedContractMethod<
    [
      _nullifiers: BigNumberish,
      _commitments: BigNumberish,
      _verifyingKey: VerifyingKeyStruct
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verify: TypedContractMethod<
    [_transaction: TransactionStruct],
    [boolean],
    "view"
  >;

  verifyProof: TypedContractMethod<
    [
      _verifyingKey: VerifyingKeyStruct,
      _proof: SnarkProofStruct,
      _inputs: BigNumberish[]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVerificationKey"
  ): TypedContractMethod<
    [_nullifiers: BigNumberish, _commitments: BigNumberish],
    [VerifyingKeyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashBoundParams"
  ): TypedContractMethod<[_boundParams: BoundParamsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerificationKey"
  ): TypedContractMethod<
    [
      _nullifiers: BigNumberish,
      _commitments: BigNumberish,
      _verifyingKey: VerifyingKeyStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<[_transaction: TransactionStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [
      _verifyingKey: VerifyingKeyStruct,
      _proof: SnarkProofStruct,
      _inputs: BigNumberish[]
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VerifyingKeySet"
  ): TypedContractEvent<
    VerifyingKeySetEvent.InputTuple,
    VerifyingKeySetEvent.OutputTuple,
    VerifyingKeySetEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VerifyingKeySet(uint256,uint256,tuple)": TypedContractEvent<
      VerifyingKeySetEvent.InputTuple,
      VerifyingKeySetEvent.OutputTuple,
      VerifyingKeySetEvent.OutputObject
    >;
    VerifyingKeySet: TypedContractEvent<
      VerifyingKeySetEvent.InputTuple,
      VerifyingKeySetEvent.OutputTuple,
      VerifyingKeySetEvent.OutputObject
    >;
  };
}
